{
    "language": "Solidity",
    "sources": {
        "./contracts/ReaperVaultERC4626.sol": {
            "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./ReaperVaultV2.sol\";\nimport \"./interfaces/IERC4626Functions.sol\";\n\n// Extension of ReaperVaultV2 that implements all ERC4626 functions.\n// ReaperVaultV2 still extends IERC4626Events so it can have access to the Deposit\n// and Withdraw events to log within its own internal _deposit() and _withdraw()\n// functions.\ncontract ReaperVaultERC4626 is ReaperVaultV2, IERC4626Functions {\n    using SafeERC20 for IERC20Metadata;\n\n    // See comments on ReaperVaultV2's constructor\n    constructor(\n        address _token,\n        string memory _name,\n        string memory _symbol,\n        uint256 _tvlCap,\n        address _treasury,\n        address[] memory _strategists,\n        address[] memory _multisigRoles\n    ) ReaperVaultV2(_token, _name, _symbol, _tvlCap, _treasury, _strategists, _multisigRoles) {}\n\n    // The address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n    // MUST be an ERC-20 token contract.\n    // MUST NOT revert.\n    function asset() external view override returns (address assetTokenAddress) {\n        return address(token);\n    }\n\n    // Total amount of the underlying asset that is “managed” by Vault.\n    // SHOULD include any compounding that occurs from yield.\n    // MUST be inclusive of any fees that are charged against assets in the Vault.\n    // MUST NOT revert.\n    function totalAssets() external view override returns (uint256 totalManagedAssets) {\n        return balance();\n    }\n\n    // The amount of shares that the Vault would exchange for the amount of assets provided,\n    // in an ideal scenario where all the conditions are met.\n    //\n    // MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n    // MUST NOT show any variations depending on the caller.\n    // MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n    // MUST NOT revert unless due to integer overflow caused by an unreasonably large input.\n    // MUST round down towards 0.\n    // This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect\n    // the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from.\n    function convertToShares(uint256 assets) public view override returns (uint256 shares) {\n        if (totalSupply() == 0 || _freeFunds() == 0) return assets;\n        return (assets * totalSupply()) / _freeFunds();\n    }\n\n    // The amount of assets that the Vault would exchange for the amount of shares provided,\n    // in an ideal scenario where all the conditions are met.\n    //\n    // MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n    // MUST NOT show any variations depending on the caller.\n    // MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n    // MUST NOT revert unless due to integer overflow caused by an unreasonably large input.\n    // MUST round down towards 0.\n    // This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect\n    // the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from.\n    function convertToAssets(uint256 shares) public view override returns (uint256 assets) {\n        if (totalSupply() == 0) return shares;\n        return (shares * _freeFunds()) / totalSupply();\n    }\n\n    // Maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call.\n    // MUST return the maximum amount of assets deposit would allow to be deposited for receiver and not cause a revert,\n    // which MUST NOT be higher than the actual maximum that would be accepted (it should underestimate if necessary).\n    //\n    // This assumes that the user has infinite assets, i.e. MUST NOT rely on balanceOf of asset.\n    // MUST factor in both global and user-specific limits, like if deposits are entirely disabled (even temporarily) it MUST return 0.\n    // MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n    // MUST NOT revert.\n    function maxDeposit(address) external view override returns (uint256 maxAssets) {\n        if (emergencyShutdown || balance() >= tvlCap) return 0;\n        if (tvlCap == type(uint256).max) return type(uint256).max;\n        return tvlCap - balance();\n    }\n\n    // Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.\n    // MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit call in the same transaction.\n    // I.e. deposit should return the same or more shares as previewDeposit if called in the same transaction.\n    //\n    // MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the deposit would be accepted,\n    // regardless if the user has enough tokens approved, etc.\n    //\n    // MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n    // MUST NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would also cause deposit to revert.\n    // Note that any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price\n    // or some other type of condition, meaning the depositor will lose assets by depositing.\n    function previewDeposit(uint256 assets) external view override returns (uint256 shares) {\n        return convertToShares(assets);\n    }\n\n    // Mints shares Vault shares to receiver by depositing exactly assets of underlying tokens.\n    // MUST emit the Deposit event.\n    // MUST support ERC-20 approve / transferFrom on asset as a deposit flow.\n    // MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the deposit execution,\n    // and are accounted for during deposit.\n    //\n    // MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage,\n    // the user not approving enough underlying tokens to the Vault contract, etc).\n    //\n    // Note that most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n    function deposit(uint256 assets, address receiver) external override returns (uint256 shares) {\n        shares = _deposit(assets, receiver);\n    }\n\n    // Maximum amount of shares that can be minted from the Vault for the receiver, through a mint call.\n    // MUST return the maximum amount of shares mint would allow to be deposited to receiver and not cause a revert,\n    // which MUST NOT be higher than the actual maximum that would be accepted (it should underestimate if necessary).\n    // This assumes that the user has infinite assets, i.e. MUST NOT rely on balanceOf of asset.\n    //\n    // MUST factor in both global and user-specific limits, like if mints are entirely disabled (even temporarily) it MUST return 0.\n    // MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n    // MUST NOT revert.\n    function maxMint(address) external view override returns (uint256 maxShares) {\n        if (emergencyShutdown || balance() >= tvlCap) return 0;\n        if (tvlCap == type(uint256).max) return type(uint256).max;\n        return convertToShares(tvlCap - balance());\n    }\n\n    // Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions.\n    // MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n    // in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the same transaction.\n    //\n    // MUST NOT account for mint limits like those returned from maxMint and should always act as though\n    // the mint would be accepted, regardless if the user has enough tokens approved, etc.\n    //\n    // MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n    // MUST NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would also cause mint to revert.\n    // Note that any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered\n    // slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\n    function previewMint(uint256 shares) public view override returns (uint256 assets) {\n        if (totalSupply() == 0) return shares;\n        assets = roundUpDiv(shares * _freeFunds(), totalSupply());\n    }\n\n    // Mints exactly shares Vault shares to receiver by depositing assets of underlying tokens.\n    // MUST emit the Deposit event.\n    // MUST support ERC-20 approve / transferFrom on asset as a mint flow. MAY support an additional\n    // flow in which the underlying tokens are owned by the Vault contract before the mint execution,\n    // and are accounted for during mint.\n    //\n    // MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage,\n    // the user not approving enough underlying tokens to the Vault contract, etc).\n    //\n    // Note that most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n    function mint(uint256 shares, address receiver) external override returns (uint256 assets) {\n        assets = previewMint(shares); // previewMint rounds up so exactly \"shares\" should be minted and not 1 wei less\n        _deposit(assets, receiver);\n    }\n\n    // Maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call.\n    // MUST return the maximum amount of assets that could be transferred from owner through withdraw and not cause a revert,\n    // which MUST NOT be higher than the actual maximum that would be accepted (it should underestimate if necessary).\n    //\n    // MUST factor in both global and user-specific limits, like if withdrawals are entirely disabled (even temporarily) it MUST return 0.\n    // MUST NOT revert.\n    function maxWithdraw(address owner) external view override returns (uint256 maxAssets) {\n        return convertToAssets(balanceOf(owner));\n    }\n\n    // Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n    // given current on-chain conditions.\n    //\n    // MUST return as close to and no fewer than the exact amount of Vault shares that would be burned\n    // in a withdraw call in the same transaction. I.e. withdraw should return the same or fewer shares\n    // as previewWithdraw if called in the same transaction.\n    //\n    // MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act\n    // as though the withdrawal would be accepted, regardless if the user has enough shares, etc.\n    //\n    // MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n    // MUST NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would also cause withdraw to revert.\n    // Note that any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be\n    // considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\n    function previewWithdraw(uint256 assets) public view override returns (uint256 shares) {\n        if (totalSupply() == 0 || _freeFunds() == 0) return 0;\n        shares = roundUpDiv(assets * totalSupply(), _freeFunds());\n    }\n\n    // Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n    // MUST emit the Withdraw event.\n    // MUST support a withdraw flow where the shares are burned from owner directly where owner is msg.sender.\n    // MUST support a withdraw flow where the shares are burned from owner directly where msg.sender has\n    // ERC-20 approval over the shares of owner.\n    //\n    // MAY support an additional flow in which the shares are transferred to the Vault contract before the\n    // withdraw execution, and are accounted for during withdraw.\n    //\n    // MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage,\n    // the owner not having enough shares, etc).\n    //\n    // Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n    // Those methods should be performed separately.\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) external override returns (uint256 shares) {\n        shares = previewWithdraw(assets); // previewWithdraw() rounds up so exactly \"assets\" are withdrawn and not 1 wei less\n        if (msg.sender != owner) _spendAllowance(owner, msg.sender, shares);\n        _withdraw(shares, receiver, owner);\n    }\n\n    // Maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call.\n    // MUST return the maximum amount of shares that could be transferred from owner through redeem and not cause a\n    // revert, which MUST NOT be higher than the actual maximum that would be accepted (it should underestimate if necessary).\n    //\n    // MUST factor in both global and user-specific limits, like if redemption is entirely disabled\n    // (even temporarily) it MUST return 0.\n    //\n    // MUST NOT revert.\n    function maxRedeem(address owner) external view override returns (uint256 maxShares) {\n        return balanceOf(owner);\n    }\n\n    // Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n    // given current on-chain conditions.\n    //\n    // MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n    // in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n    // same transaction.\n    //\n    // MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though\n    // the redemption would be accepted, regardless if the user has enough shares, etc.\n    //\n    // MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n    // MUST NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would\n    // also cause redeem to revert.\n    //\n    // Note that any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage\n    // in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n    function previewRedeem(uint256 shares) external view override returns (uint256 assets) {\n        return convertToAssets(shares);\n    }\n\n    // Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n    // MUST emit the Withdraw event.\n    // MUST support a redeem flow where the shares are burned from owner directly where owner is msg.sender.\n    // MUST support a redeem flow where the shares are burned from owner directly where msg.sender has ERC-20\n    // approval over the shares of owner.\n    //\n    // MAY support an additional flow in which the shares are transferred to the Vault contract before the redeem\n    // execution, and are accounted for during redeem.\n    //\n    // MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage,\n    // the owner not having enough shares, etc).\n    //\n    // Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n    // Those methods should be performed separately.\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) external override returns (uint256 assets) {\n        if (msg.sender != owner) _spendAllowance(owner, msg.sender, shares);\n        assets = _withdraw(shares, receiver, owner);\n    }\n\n    // Helper function to perform round-up/ceiling integer division.\n    // Based on the formula: x / y + (x % y != 0)\n    function roundUpDiv(uint256 x, uint256 y) internal pure returns (uint256) {\n        require(y != 0, \"Division by 0\");\n\n        uint256 q = x / y;\n        if (x % y != 0) q++;\n        return q;\n    }\n}\n"
        },
        "./contracts/ReaperVaultV2.sol": {
            "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IERC4626Events.sol\";\nimport \"./interfaces/IStrategy.sol\";\nimport \"./libraries/ReaperMathUtils.sol\";\nimport \"./mixins/ReaperAccessControl.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @notice Implementation of a vault to deposit funds for yield optimizing.\n * This is the contract that receives funds and that users interface with.\n * The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\n */\ncontract ReaperVaultV2 is ReaperAccessControl, ERC20, IERC4626Events, AccessControlEnumerable, ReentrancyGuard {\n    using ReaperMathUtils for uint256;\n    using SafeERC20 for IERC20Metadata;\n\n    struct StrategyParams {\n        uint256 activation; // Activation block.timestamp\n        uint256 feeBPS; // Performance fee taken from profit, in BPS\n        uint256 allocBPS; // Allocation in BPS of vault's total assets\n        uint256 allocated; // Amount of capital allocated to this strategy\n        uint256 gains; // Total returns that Strategy has realized for Vault\n        uint256 losses; // Total losses that Strategy has realized for Vault\n        uint256 lastReport; // block.timestamp of the last time a report occured\n    }\n\n    mapping(address => StrategyParams) public strategies;\n\n    // Ordering that `withdraw` uses to determine which strategies to pull funds from\n    address[] public withdrawalQueue;\n\n    uint256 public constant DEGRADATION_COEFFICIENT = 10**18; // The unit for calculating profit degradation.\n    uint256 public constant PERCENT_DIVISOR = 10000;\n    uint256 public tvlCap;\n\n    uint256 public totalAllocBPS; // Sum of allocBPS across all strategies (in BPS, <= 10k)\n    uint256 public totalAllocated; // Amount of tokens that have been allocated to all strategies\n    uint256 public lastReport; // block.timestamp of last report from any strategy\n\n    uint256 public immutable constructionTime;\n    bool public emergencyShutdown;\n\n    // The token the vault accepts and looks to maximize.\n    IERC20Metadata public immutable token;\n\n    // Max slippage(loss) allowed when withdrawing, in BPS (0.01%)\n    uint256 public withdrawMaxLoss = 1;\n    uint256 public lockedProfitDegradation; // rate per block of degradation. DEGRADATION_COEFFICIENT is 100% per block\n    uint256 public lockedProfit; // how much profit is locked and cant be withdrawn\n\n    /**\n     * Reaper Roles in increasing order of privilege.\n     * {STRATEGIST} - Role conferred to authors of the strategy, allows for tweaking non-critical params.\n     * {GUARDIAN} - Multisig requiring 2 signatures for invoking emergency measures.\n     * {ADMIN}- Multisig requiring 3 signatures for deactivating emergency measures and changing TVL cap.\n     *\n     * The DEFAULT_ADMIN_ROLE (in-built access control role) will be granted to a multisig requiring 4\n     * signatures. This role would have the ability to add strategies, as well as the ability to grant any other\n     * roles.\n     *\n     * Also note that roles are cascading. So any higher privileged role should be able to perform all the functions\n     * of any lower privileged role.\n     */\n    bytes32 public constant STRATEGIST = keccak256(\"STRATEGIST\");\n    bytes32 public constant GUARDIAN = keccak256(\"GUARDIAN\");\n    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\n\n    address public treasury; // address to whom performance fee is remitted in the form of vault shares\n\n    event StrategyAdded(address indexed strategy, uint256 feeBPS, uint256 allocBPS);\n    event StrategyFeeBPSUpdated(address indexed strategy, uint256 feeBPS);\n    event StrategyAllocBPSUpdated(address indexed strategy, uint256 allocBPS);\n    event StrategyRevoked(address indexed strategy);\n    event UpdateWithdrawalQueue(address[] withdrawalQueue);\n    event WithdrawMaxLossUpdated(uint256 withdrawMaxLoss);\n    event EmergencyShutdown(bool active);\n    event InCaseTokensGetStuckCalled(address token, uint256 amount);\n    event TvlCapUpdated(uint256 newTvlCap);\n    event LockedProfitDegradationUpdated(uint256 degradation);\n    event StrategyReported(\n        address indexed strategy,\n        uint256 gain,\n        uint256 loss,\n        uint256 debtPaid,\n        uint256 gains,\n        uint256 losses,\n        uint256 allocated,\n        uint256 allocationAdded,\n        uint256 allocBPS\n    );\n\n    /**\n     * @notice Initializes the vault's own 'RF' token.\n     * This token is minted when someone does a deposit. It is burned in order\n     * to withdraw the corresponding portion of the underlying assets.\n     * @param _token the token to maximize.\n     * @param _name the name of the vault token.\n     * @param _symbol the symbol of the vault token.\n     * @param _tvlCap initial deposit cap for scaling TVL safely\n     */\n    constructor(\n        address _token,\n        string memory _name,\n        string memory _symbol,\n        uint256 _tvlCap,\n        address _treasury,\n        address[] memory _strategists,\n        address[] memory _multisigRoles\n    ) ERC20(string(_name), string(_symbol)) {\n        token = IERC20Metadata(_token);\n        constructionTime = block.timestamp;\n        lastReport = block.timestamp;\n        tvlCap = _tvlCap;\n        treasury = _treasury;\n        lockedProfitDegradation = (DEGRADATION_COEFFICIENT * 46) / 10**6; // 6 hours in blocks\n\n        uint256 numStrategists = _strategists.length;\n        for (uint256 i = 0; i < numStrategists; i = i.uncheckedInc()) {\n            _grantRole(STRATEGIST, _strategists[i]);\n        }\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(DEFAULT_ADMIN_ROLE, _multisigRoles[0]);\n        _grantRole(ADMIN, _multisigRoles[1]);\n        _grantRole(GUARDIAN, _multisigRoles[2]);\n    }\n\n    /**\n     * @notice Adds a new strategy to the vault with a given allocation amount in basis points.\n     * @param _strategy The strategy to add.\n     * @param _feeBPS The performance fee (taken from profit) in basis points\n     * @param _allocBPS The strategy allocation in basis points\n     */\n    function addStrategy(\n        address _strategy,\n        uint256 _feeBPS,\n        uint256 _allocBPS\n    ) external {\n        _atLeastRole(DEFAULT_ADMIN_ROLE);\n        require(!emergencyShutdown, \"Cannot add strategy during emergency shutdown\");\n        require(_strategy != address(0), \"Invalid strategy address\");\n        require(strategies[_strategy].activation == 0, \"Strategy already added\");\n        require(address(this) == IStrategy(_strategy).vault(), \"Strategy's vault does not match\");\n        require(address(token) == IStrategy(_strategy).want(), \"Strategy's want does not match\");\n        require(_feeBPS <= PERCENT_DIVISOR / 5, \"Fee cannot be higher than 20 BPS\");\n        require(_allocBPS + totalAllocBPS <= PERCENT_DIVISOR, \"Invalid allocBPS value\");\n\n        strategies[_strategy] = StrategyParams({\n            activation: block.timestamp,\n            feeBPS: _feeBPS,\n            allocBPS: _allocBPS,\n            allocated: 0,\n            gains: 0,\n            losses: 0,\n            lastReport: block.timestamp\n        });\n\n        totalAllocBPS += _allocBPS;\n        withdrawalQueue.push(_strategy);\n        emit StrategyAdded(_strategy, _feeBPS, _allocBPS);\n    }\n\n    /**\n     * @notice Updates the strategy's performance fee.\n     * @param _strategy The strategy to update.\n     * @param _feeBPS The new performance fee in basis points.\n     */\n    function updateStrategyFeeBPS(address _strategy, uint256 _feeBPS) external {\n        _atLeastRole(ADMIN);\n        require(strategies[_strategy].activation != 0, \"Invalid strategy address\");\n        require(_feeBPS <= PERCENT_DIVISOR / 5, \"Fee cannot be higher than 20 BPS\");\n        strategies[_strategy].feeBPS = _feeBPS;\n        emit StrategyFeeBPSUpdated(_strategy, _feeBPS);\n    }\n\n    /**\n     * @notice Updates the allocation points for a given strategy.\n     * @param _strategy The strategy to update.\n     * @param _allocBPS The strategy allocation in basis points\n     */\n    function updateStrategyAllocBPS(address _strategy, uint256 _allocBPS) external {\n        _atLeastRole(STRATEGIST);\n        require(strategies[_strategy].activation != 0, \"Invalid strategy address\");\n        totalAllocBPS -= strategies[_strategy].allocBPS;\n        strategies[_strategy].allocBPS = _allocBPS;\n        totalAllocBPS += _allocBPS;\n        require(totalAllocBPS <= PERCENT_DIVISOR, \"Invalid BPS value\");\n        emit StrategyAllocBPSUpdated(_strategy, _allocBPS);\n    }\n\n    /**\n     * @notice Removes any allocation to a given strategy.\n     * @param _strategy The strategy to revoke.\n     */\n    function revokeStrategy(address _strategy) external {\n        if (msg.sender != _strategy) {\n            _atLeastRole(GUARDIAN);\n        }\n\n        if (strategies[_strategy].allocBPS == 0) {\n            return;\n        }\n\n        totalAllocBPS -= strategies[_strategy].allocBPS;\n        strategies[_strategy].allocBPS = 0;\n        emit StrategyRevoked(_strategy);\n    }\n\n    /**\n     * @notice Called by a strategy to determine the amount of capital that the vault is\n     * able to provide it. A positive amount means that vault has excess capital to provide\n     * the strategy, while a negative amount means that the strategy has a balance owing to\n     * the vault.\n     */\n    function availableCapital() public view returns (int256) {\n        address stratAddr = msg.sender;\n        if (totalAllocBPS == 0 || emergencyShutdown) {\n            return -int256(strategies[stratAddr].allocated);\n        }\n\n        uint256 stratMaxAllocation = (strategies[stratAddr].allocBPS * balance()) / PERCENT_DIVISOR;\n        uint256 stratCurrentAllocation = strategies[stratAddr].allocated;\n\n        if (stratCurrentAllocation > stratMaxAllocation) {\n            return -int256(stratCurrentAllocation - stratMaxAllocation);\n        } else if (stratCurrentAllocation < stratMaxAllocation) {\n            uint256 vaultMaxAllocation = (totalAllocBPS * balance()) / PERCENT_DIVISOR;\n            uint256 vaultCurrentAllocation = totalAllocated;\n\n            if (vaultCurrentAllocation >= vaultMaxAllocation) {\n                return 0;\n            }\n\n            uint256 available = stratMaxAllocation - stratCurrentAllocation;\n            available = Math.min(available, vaultMaxAllocation - vaultCurrentAllocation);\n            available = Math.min(available, token.balanceOf(address(this)));\n\n            return int256(available);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * @notice Updates the withdrawalQueue to match the addresses and order specified.\n     * @param _withdrawalQueue The new withdrawalQueue to update to.\n     */\n    function setWithdrawalQueue(address[] calldata _withdrawalQueue) external {\n        _atLeastRole(ADMIN);\n        uint256 queueLength = _withdrawalQueue.length;\n        require(queueLength != 0, \"Queue must not be empty\");\n\n        delete withdrawalQueue;\n        for (uint256 i = 0; i < queueLength; i = i.uncheckedInc()) {\n            address strategy = _withdrawalQueue[i];\n            StrategyParams storage params = strategies[strategy];\n            require(params.activation != 0, \"Invalid strategy address\");\n            withdrawalQueue.push(strategy);\n        }\n        emit UpdateWithdrawalQueue(_withdrawalQueue);\n    }\n\n    /**\n     * @dev It calculates the total underlying value of {token} held by the system.\n     * It takes into account the vault contract balance, and the balance deployed across\n     * all the strategies.\n     */\n    function balance() public view returns (uint256) {\n        return token.balanceOf(address(this)) + totalAllocated;\n    }\n\n    /**\n     * @notice It calculates the amount of free funds available after profit locking.\n     * For calculating share price, issuing shares during deposit, or burning shares during withdrawal.\n     * @return freeFunds - the total amount of free funds available.\n     */\n    function _freeFunds() internal view returns (uint256) {\n        return balance() - _calculateLockedProfit();\n    }\n\n    /**\n     * @dev Function for various UIs to display the current value of one of our yield tokens.\n     * Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\n     */\n    function getPricePerFullShare() public view returns (uint256) {\n        return totalSupply() == 0 ? 10**decimals() : (_freeFunds() * 10**decimals()) / totalSupply();\n    }\n\n    /**\n     * @dev A helper function to call deposit() with all the sender's funds.\n     */\n    function depositAll() external {\n        _deposit(token.balanceOf(msg.sender), msg.sender);\n    }\n\n    /**\n     * @notice The entrypoint of funds into the system. People deposit with this function\n     * into the vault.\n     * @notice the _before and _after variables are used to account properly for\n     * 'burn-on-transaction' tokens.\n     * @param _amount The amount of assets to deposit\n     */\n    function deposit(uint256 _amount) external {\n        _deposit(_amount, msg.sender);\n    }\n\n    // Internal helper function to deposit {_amount} of assets and mint corresponding\n    // shares to {_receiver}. Returns the number of shares that were minted.\n    function _deposit(uint256 _amount, address _receiver) internal nonReentrant returns (uint256 shares) {\n        require(!emergencyShutdown, \"Cannot deposit during emergency shutdown\");\n        require(_amount != 0, \"Invalid amount\");\n        uint256 pool = balance();\n        require(pool + _amount <= tvlCap, \"Vault is full\");\n\n        uint256 freeFunds = _freeFunds();\n        uint256 balBefore = token.balanceOf(address(this));\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 balAfter = token.balanceOf(address(this));\n        _amount = balAfter - balBefore;\n        if (totalSupply() == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount * totalSupply()) / freeFunds; // use \"freeFunds\" instead of \"pool\"\n        }\n        _mint(_receiver, shares);\n        emit Deposit(msg.sender, _receiver, _amount, shares);\n    }\n\n    /**\n     * @dev A helper function to call withdraw() with all the sender's funds.\n     */\n    function withdrawAll() external {\n        _withdraw(balanceOf(msg.sender), msg.sender, msg.sender);\n    }\n\n    /**\n     * @notice Function to exit the system. The vault will withdraw the required tokens\n     * from the strategies and pay up the token holder. A proportional number of IOU\n     * tokens are burned in the process.\n     * @param _shares the number of shares to burn\n     */\n    function withdraw(uint256 _shares) external {\n        _withdraw(_shares, msg.sender, msg.sender);\n    }\n\n    // Internal helper function to burn {_shares} of vault shares belonging to {_owner}\n    // and return corresponding assets to {_receiver}. Returns the number of assets that were returned.\n    function _withdraw(\n        uint256 _shares,\n        address _receiver,\n        address _owner\n    ) internal nonReentrant returns (uint256 value) {\n        require(_shares != 0, \"Invalid amount\");\n        value = (_freeFunds() * _shares) / totalSupply();\n        _burn(_owner, _shares);\n\n        if (value > token.balanceOf(address(this))) {\n            uint256 totalLoss = 0;\n            uint256 queueLength = withdrawalQueue.length;\n            uint256 vaultBalance = 0;\n            for (uint256 i = 0; i < queueLength; i = i.uncheckedInc()) {\n                vaultBalance = token.balanceOf(address(this));\n                if (value <= vaultBalance) {\n                    break;\n                }\n\n                address stratAddr = withdrawalQueue[i];\n                uint256 strategyBal = strategies[stratAddr].allocated;\n                if (strategyBal == 0) {\n                    continue;\n                }\n\n                uint256 remaining = value - vaultBalance;\n                uint256 loss = IStrategy(stratAddr).withdraw(Math.min(remaining, strategyBal));\n                uint256 actualWithdrawn = token.balanceOf(address(this)) - vaultBalance;\n\n                // Withdrawer incurs any losses from withdrawing as reported by strat\n                if (loss != 0) {\n                    value -= loss;\n                    totalLoss += loss;\n                    _reportLoss(stratAddr, loss);\n                }\n\n                strategies[stratAddr].allocated -= actualWithdrawn;\n                totalAllocated -= actualWithdrawn;\n            }\n\n            vaultBalance = token.balanceOf(address(this));\n            if (value > vaultBalance) {\n                value = vaultBalance;\n            }\n\n            require(\n                totalLoss <= ((value + totalLoss) * withdrawMaxLoss) / PERCENT_DIVISOR,\n                \"Withdraw loss exceeds slippage\"\n            );\n        }\n\n        token.safeTransfer(_receiver, value);\n        emit Withdraw(msg.sender, _receiver, _owner, value, _shares);\n    }\n\n    /**\n     * @notice It calculates the amount of locked profit from recent harvests.\n     * @return the amount of locked profit.\n     */\n    function _calculateLockedProfit() internal view returns (uint256) {\n        uint256 lockedFundsRatio = (block.timestamp - lastReport) * lockedProfitDegradation;\n        if (lockedFundsRatio < DEGRADATION_COEFFICIENT) {\n            return lockedProfit - ((lockedFundsRatio * lockedProfit) / DEGRADATION_COEFFICIENT);\n        }\n\n        return 0;\n    }\n\n    /**\n     * @notice Helper function to report a loss by a given strategy.\n     * @param strategy The strategy to report the loss for.\n     * @param loss The amount lost.\n     */\n    function _reportLoss(address strategy, uint256 loss) internal {\n        StrategyParams storage stratParams = strategies[strategy];\n        // Loss can only be up the amount of capital allocated to the strategy\n        uint256 allocation = stratParams.allocated;\n        require(loss <= allocation, \"Strategy loss cannot be greater than allocation\");\n\n        if (totalAllocBPS != 0) {\n            // reduce strat's allocBPS proportional to loss\n            uint256 bpsChange = Math.min((loss * totalAllocBPS) / totalAllocated, stratParams.allocBPS);\n\n            // If the loss is too small, bpsChange will be 0\n            if (bpsChange != 0) {\n                stratParams.allocBPS -= bpsChange;\n                totalAllocBPS -= bpsChange;\n            }\n        }\n\n        // Finally, adjust our strategy's parameters by the loss\n        stratParams.losses += loss;\n        stratParams.allocated -= loss;\n        totalAllocated -= loss;\n    }\n\n    /**\n     * @notice Helper function to charge fees from the gain reported by a strategy.\n     * Fees is charged by issuing the corresponding amount of vault shares to the treasury.\n     * @param strategy The strategy that reported gain.\n     * @param gain The amount of profit reported.\n     * @return The fee amount in assets.\n     */\n    function _chargeFees(address strategy, uint256 gain) internal returns (uint256) {\n        uint256 performanceFee = (gain * strategies[strategy].feeBPS) / PERCENT_DIVISOR;\n        if (performanceFee != 0) {\n            uint256 supply = totalSupply();\n            uint256 shares = supply == 0 ? performanceFee : (performanceFee * supply) / _freeFunds();\n            _mint(treasury, shares);\n        }\n        return performanceFee;\n    }\n\n    // To avoid \"stack too deep\" errors\n    struct LocalVariables_report {\n        address stratAddr;\n        uint256 loss;\n        uint256 gain;\n        uint256 fees;\n        int256 available;\n        uint256 debt;\n        uint256 credit;\n        uint256 debtPayment;\n        uint256 freeWantInStrat;\n        uint256 lockedProfitBeforeLoss;\n    }\n\n    /**\n     * @notice Main contact point where each strategy interacts with the vault during its harvest\n     * to report profit/loss as well as any repayment of debt.\n     * @param _roi The return on investment (positive or negative) given as the total amount\n     * gained or lost from the harvest.\n     * @param _repayment The repayment of debt by the strategy.\n     */\n    function report(int256 _roi, uint256 _repayment) external returns (uint256) {\n        LocalVariables_report memory vars;\n        vars.stratAddr = msg.sender;\n        StrategyParams storage strategy = strategies[vars.stratAddr];\n        require(strategy.activation != 0, \"Unauthorized strategy\");\n\n        if (_roi < 0) {\n            vars.loss = uint256(-_roi);\n            _reportLoss(vars.stratAddr, vars.loss);\n        } else if (_roi > 0) {\n            vars.gain = uint256(_roi);\n            vars.fees = _chargeFees(vars.stratAddr, vars.gain);\n            strategy.gains += vars.gain;\n        }\n\n        vars.available = availableCapital();\n        if (vars.available < 0) {\n            vars.debt = uint256(-vars.available);\n            vars.debtPayment = Math.min(vars.debt, _repayment);\n\n            if (vars.debtPayment != 0) {\n                strategy.allocated -= vars.debtPayment;\n                totalAllocated -= vars.debtPayment;\n                vars.debt -= vars.debtPayment; // tracked for return value\n            }\n        } else if (vars.available > 0) {\n            vars.credit = uint256(vars.available);\n            strategy.allocated += vars.credit;\n            totalAllocated += vars.credit;\n        }\n\n        vars.freeWantInStrat = vars.gain + _repayment;\n        if (vars.credit > vars.freeWantInStrat) {\n            token.safeTransfer(vars.stratAddr, vars.credit - vars.freeWantInStrat);\n        } else if (vars.credit < vars.freeWantInStrat) {\n            token.safeTransferFrom(vars.stratAddr, address(this), vars.freeWantInStrat - vars.credit);\n        }\n\n        // Profit is locked and gradually released per block\n        // NOTE: compute current locked profit and replace with sum of current and new\n        vars.lockedProfitBeforeLoss = _calculateLockedProfit() + vars.gain - vars.fees;\n        if (vars.lockedProfitBeforeLoss > vars.loss) {\n            lockedProfit = vars.lockedProfitBeforeLoss - vars.loss;\n        } else {\n            lockedProfit = 0;\n        }\n\n        strategy.lastReport = block.timestamp;\n        lastReport = block.timestamp;\n\n        emit StrategyReported(\n            vars.stratAddr,\n            vars.gain,\n            vars.loss,\n            vars.debtPayment,\n            strategy.gains,\n            strategy.losses,\n            strategy.allocated,\n            vars.credit,\n            strategy.allocBPS\n        );\n\n        if (strategy.allocBPS == 0 || emergencyShutdown) {\n            return IStrategy(vars.stratAddr).balanceOf();\n        }\n\n        return vars.debt;\n    }\n\n    /**\n     * @notice Updates the withdrawMaxLoss which is the maximum allowed slippage.\n     * @param _withdrawMaxLoss The new value, in basis points.\n     */\n    function updateWithdrawMaxLoss(uint256 _withdrawMaxLoss) external {\n        _atLeastRole(STRATEGIST);\n        require(_withdrawMaxLoss <= PERCENT_DIVISOR, \"Invalid BPS value\");\n        withdrawMaxLoss = _withdrawMaxLoss;\n        emit WithdrawMaxLossUpdated(_withdrawMaxLoss);\n    }\n\n    /**\n     * @notice Updates the vault tvl cap (the max amount of assets held by the vault).\n     * @dev pass in max value of uint to effectively remove TVL cap.\n     * @param _newTvlCap The new tvl cap.\n     */\n    function updateTvlCap(uint256 _newTvlCap) public {\n        _atLeastRole(ADMIN);\n        tvlCap = _newTvlCap;\n        emit TvlCapUpdated(tvlCap);\n    }\n\n    /**\n     * @dev helper function to remove TVL cap\n     */\n    function removeTvlCap() external {\n        updateTvlCap(type(uint256).max);\n    }\n\n    /**\n     * Activates or deactivates Vault mode where all Strategies go into full\n     * withdrawal.\n     * During Emergency Shutdown:\n     * 1. No Users may deposit into the Vault (but may withdraw as usual.)\n     * 2. New Strategies may not be added.\n     * 3. Each Strategy must pay back their debt as quickly as reasonable to\n     * minimally affect their position.\n     *\n     * If true, the Vault goes into Emergency Shutdown. If false, the Vault\n     * goes back into Normal Operation.\n     */\n    function setEmergencyShutdown(bool _active) external {\n        if (_active) {\n            _atLeastRole(GUARDIAN);\n        } else {\n            _atLeastRole(ADMIN);\n        }\n        emergencyShutdown = _active;\n        emit EmergencyShutdown(_active);\n    }\n\n    /**\n     * @notice Changes the locked profit degradation.\n     * @param degradation - The rate of degradation in percent per second scaled to 1e18.\n     */\n    function setLockedProfitDegradation(uint256 degradation) external {\n        _atLeastRole(ADMIN);\n        require(degradation <= DEGRADATION_COEFFICIENT, \"Degradation cannot be more than 100%\");\n        lockedProfitDegradation = degradation;\n        emit LockedProfitDegradationUpdated(degradation);\n    }\n\n    /**\n     * @notice Only DEFAULT_ADMIN_ROLE can update treasury address.\n     */\n    function updateTreasury(address newTreasury) external {\n        _atLeastRole(DEFAULT_ADMIN_ROLE);\n        require(newTreasury != address(0), \"Invalid address\");\n        treasury = newTreasury;\n    }\n\n    /**\n     * @dev Rescues random funds stuck that the strat can't handle.\n     * @param _token address of the token to rescue.\n     */\n    function inCaseTokensGetStuck(address _token) external {\n        _atLeastRole(ADMIN);\n        require(_token != address(token), \"!token\");\n\n        uint256 amount = IERC20Metadata(_token).balanceOf(address(this));\n        IERC20Metadata(_token).safeTransfer(msg.sender, amount);\n        emit InCaseTokensGetStuckCalled(_token, amount);\n    }\n\n    /**\n     * @dev Overrides the default 18 decimals for the vault ERC20 to\n     * match the same decimals as the underlying token used\n     */\n    function decimals() public view override returns (uint8) {\n        return token.decimals();\n    }\n\n    /**\n     * @dev Returns an array of all the relevant roles arranged in descending order of privilege.\n     *      Subclasses should override this to specify their unique roles arranged in the correct\n     *      order, for example, [SUPER-ADMIN, ADMIN, GUARDIAN, STRATEGIST].\n     */\n    function _cascadingAccessRoles() internal view override returns (bytes32[] memory) {\n        bytes32[] memory cascadingAccessRoles = new bytes32[](4);\n        cascadingAccessRoles[0] = DEFAULT_ADMIN_ROLE;\n        cascadingAccessRoles[1] = ADMIN;\n        cascadingAccessRoles[2] = GUARDIAN;\n        cascadingAccessRoles[3] = STRATEGIST;\n        return cascadingAccessRoles;\n    }\n\n    /**\n     * @dev Returns {true} if {_account} has been granted {_role}. Subclasses should override\n     *      this to specify their unique role-checking criteria.\n     */\n    function _hasRole(bytes32 _role, address _account) internal view override returns (bool) {\n        return hasRole(_role, _account);\n    }\n}\n"
        },
        "./contracts/interfaces/IERC4626Events.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity ^0.8.0;\n\ninterface IERC4626Events {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n}\n"
        },
        "./contracts/interfaces/IStrategy.sol": {
            "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\ninterface IStrategy {\n    //vault only - withdraws funds from the strategy\n    function withdraw(uint256 _amount) external returns (uint256 loss);\n\n    //claims rewards, charges fees, and re-deposits; returns roi (+ve for profit, -ve for loss).\n    function harvest() external returns (int256 roi);\n\n    //returns the balance of all tokens managed by the strategy\n    function balanceOf() external view returns (uint256);\n\n    //returns the address of the vault that the strategy is serving\n    function vault() external view returns (address);\n\n    //returns the address of the token that the strategy needs to operate\n    function want() external view returns (address);\n}\n"
        },
        "./contracts/libraries/ReaperMathUtils.sol": {
            "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nlibrary ReaperMathUtils {\n    /**\n     * @notice For doing an unchecked increment of an index for gas optimization purposes\n     * @param _i - The number to increment\n     * @return The incremented number\n     */\n    function uncheckedInc(uint256 _i) internal pure returns (uint256) {\n        unchecked {\n            return _i + 1;\n        }\n    }\n}\n"
        },
        "./contracts/mixins/ReaperAccessControl.sol": {
            "content": "// SPDX-License-Identifier: BUSL-1.1\n\nimport \"../libraries/ReaperMathUtils.sol\";\n\npragma solidity ^0.8.0;\n\n/**\n * A mixin to provide access control to a variety of roles. Designed to be compatible\n * with both upgradeable and non-upgradble contracts. HAS NO STORAGE.\n */\nabstract contract ReaperAccessControl {\n    using ReaperMathUtils for uint256;\n\n    /**\n     * @notice Checks cascading role privileges to ensure that caller has at least role {_role}.\n     * Any higher privileged role should be able to perform all the functions of any lower privileged role.\n     * This is accomplished using the {cascadingAccess} array that lists all roles from most privileged\n     * to least privileged.\n     * @param _role - The role in bytes from the keccak256 hash of the role name\n     */\n    function _atLeastRole(bytes32 _role) internal view {\n        bytes32[] memory cascadingAccessRoles = _cascadingAccessRoles();\n        uint256 numRoles = cascadingAccessRoles.length;\n        bool specifiedRoleFound = false;\n        bool senderHighestRoleFound = false;\n\n        // {_role} must be found in the {cascadingAccessRoles} array.\n        // Also, msg.sender's highest role index <= specified role index.\n        for (uint256 i = 0; i < numRoles; i = i.uncheckedInc()) {\n            if (!senderHighestRoleFound && _hasRole(cascadingAccessRoles[i], msg.sender)) {\n                senderHighestRoleFound = true;\n            }\n            if (_role == cascadingAccessRoles[i]) {\n                specifiedRoleFound = true;\n                break;\n            }\n        }\n\n        require(specifiedRoleFound && senderHighestRoleFound, \"Unauthorized access\");\n    }\n\n    /**\n     * @dev Returns an array of all the relevant roles arranged in descending order of privilege.\n     *      Subclasses should override this to specify their unique roles arranged in the correct\n     *      order, for example, [SUPER-ADMIN, ADMIN, GUARDIAN, STRATEGIST].\n     */\n    function _cascadingAccessRoles() internal view virtual returns (bytes32[] memory);\n\n    /**\n     * @dev Returns {true} if {_account} has been granted {_role}. Subclasses should override\n     *      this to specify their unique role-checking criteria.\n     */\n    function _hasRole(bytes32 _role, address _account) internal view virtual returns (bool);\n}\n"
        },
        "./contracts/interfaces/IERC4626Functions.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity ^0.8.0;\n\ninterface IERC4626Functions {\n    function asset() external view returns (address assetTokenAddress);\n\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) external returns (uint256 shares);\n\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) external returns (uint256 assets);\n}\n"
        },
        "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
        },
        "@openzeppelin/contracts/access/IAccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
        },
        "@openzeppelin/contracts/access/AccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Strings.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
        },
        "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/math/Math.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}